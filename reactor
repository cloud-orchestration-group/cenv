#!/usr/bin/env bash
#
# Usage:
#
#  LOG_LEVEL=7 reactor [flags] command [flags/options]
#
#=========================================================================================
# Initialization
#

export __dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
export __base="$(basename ${BASH_SOURCE[0]})"
export __file="${__dir}/$(basename ${__base})"
export __script_dir="${__dir}/scripts"

if ! [ -z "$1" ] && [ "$1" == "path" ]; then
  if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    # script is being sourced
    export PATH="${__dir}:${__dir}/.skaffold/bin:$PATH"
    return
  fi
  exit
fi

source "${__script_dir}/variables.sh"

for file in "${__script_dir}/utilities"/*.sh; do
  source "$file"
done
for file in "${__script_dir}/commands"/*.sh; do
  source "$file"
done

# shellcheck disable=SC2015
[[ "${__usage+x}" ]] || read -r -d '' __usage <<EOF || true

  Reactor manages the Zimagi local development environment.

  Usage:

    reactor [flags] [command] [flags/options]

  Flags:
${__core_help_flags}

  Commands:

    help             Display help information for a command
    path             Source executable paths ontp system PATH variable
    init             Initialize development environment
    up               Start development environment
    status           Output status of the development environment
    shell            Connects to running application
    reload           Reload command and data api
    down             Stop development environment
    destroy          Purge development environment

EOF

[[ "${__helptext+x}" ]] || read -r -d '' __helptext <<-'EOF' ||
  Use "reactor <command> --help" for more information about a given command.

  For easier execution in new bash sessions run:

  > source ./reactor path      # exposes zimagi and reactor command aliases
EOF

[[ $# -eq 0 ]] && arg_h=1

COMMAND_ARGS=()
arg_processed=0

while [[ $# -gt 0 ]]; do
  case "$1" in
    -v|--verbose)
      arg_v=1
      shift
      ;;
    -d|--debug)
      arg_d=1
      shift
      ;;
    -n|--no-color)
      arg_n=1
      shift
      ;;
    -h|--help)
      if [ $arg_processed -ne 1 ]; then
        arg_h=1
      else
        COMMAND_ARGS+=("$1")
      fi
      shift
      ;;
    *)
      COMMAND_ARGS+=("$1")
      arg_processed=1
      shift
      ;;
  esac
done

function help () {
  echo "" 1>&2
  echo " ${*}" 1>&2
  echo "" 1>&2
  echo "  ${__usage:-No usage available}" 1>&2
  echo "" 1>&2

  if [[ "${__helptext:-}" ]]; then
    echo " ${__helptext}" 1>&2
    echo "" 1>&2
  fi
  exit 1
}

#
#=========================================================================================
# Execution
#

# error handling
set -o errexit
set -o errtrace
set -o nounset
set -o pipefail

# log check
[[ "${LOG_LEVEL:-6}" ]] || emergency "Cannot continue without LOG_LEVEL"

# debug mode
if [[ "${arg_d:-0}" = "1" ]]; then
  #set -o xtrace
  PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  LOG_LEVEL="7"
  # Enable error backtracing
  trap '__err_report "${FUNCNAME:-.}" ${LINENO}' ERR
fi

# verbose mode
if [[ "${arg_v:-0}" = "1" ]]; then
  set -o verbose
fi

# no color mode
if [[ "${arg_n:-0}" = "1" ]]; then
  NO_COLOR="true"
fi


debug "Top level flags"
debug "> Debug: ${arg_d:-0}"
debug "> Verbosity: ${arg_v:-0}"
debug "> Help: ${arg_h:-0}"

debug "Script properties"
debug "> OS type: ${OSTYPE}"
debug "> Invocation: ${__invocation}"
debug "> Directory: ${__dir}"
debug "> Script file: ${__file}"
debug "> Script name: ${__base}"

debug "Project and development properties"
debug "> Skaffold directory: ${__skaffold_dir}"
debug "> Executable directory: ${__binary_dir}"
debug "> Docker directory: ${__docker_dir}"
debug "> Helm chart directory: ${__charts_dir}"
debug "> Certificate directory: ${__certs_dir}"

debug "Zimagi project properties"
debug "> Application directory: ${__app_dir}"
debug "> Package directory: ${__package_dir}"
debug "> Data directory: ${__data_dir}"
debug "> Lib directory: ${__lib_dir}"
debug "> Zimagi environment file: ${__env_file}"
debug "> Docker environment file: ${__docker_env_file}"
debug "> CLI environment file: ${__cli_env_file}"


# help mode
if [[ "${arg_h:-0}" = "1" ]]; then
  help "Help using ${0}"
fi

if ! [[ ${#COMMAND_ARGS[@]} -gt 0 ]]; then
  help "Help using ${0}"
else
  COMMAND="${COMMAND_ARGS[0]}"
  COMMAND_ARGS=("${COMMAND_ARGS[@]:1}")

  import_environment

  case $COMMAND in
    init)
      init "${COMMAND_ARGS[@]}"
      ;;
    up)
      up "${COMMAND_ARGS[@]}"
      ;;
    status)
      status "${COMMAND_ARGS[@]}"
      ;;
    shell)
      shell "${COMMAND_ARGS[@]}"
      ;;
    reload)
      reload "${COMMAND_ARGS[@]}"
      ;;
    down)
      down "${COMMAND_ARGS[@]}"
      ;;
    destroy)
      destroy "${COMMAND_ARGS[@]}"
      ;;
    help)
      if ! [[ ${#COMMAND_ARGS[@]} -gt 0 ]]; then
        help "Help using ${0}"
      else
        ${COMMAND_ARGS[0]} --help
      fi
      ;;
    *)
      emergency "Unknown command: ${COMMAND}"
      ;;
  esac
fi
