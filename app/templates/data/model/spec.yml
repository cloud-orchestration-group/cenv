#
# Define collections of fields for data models
#
data_mixins:
    <{ data_name }>:
        class: <{ class_name(data_name) }>Mixin
        fields:
            <{ data_name }>:
                type: "@django.ForeignKey"
                relation: <{ data_name }>
                options:
                    "null": true
                    on_delete: "@django.PROTECT"
                    editable: false

    <{ data_name }><{ data_name_plural_suffix }>:
        class: <{ class_name(data_name) }>MultipleMixin
        fields:
            <{ data_name }><{ data_name_plural_suffix }>:
                type: "@django.ManyToManyField"
                relation: <{ data_name }>

#
# Define abstract base data model (for parent relationships)
#
data_base:
    <{ data_name }>:
        class: <{ class_name(data_name) }>Base
        base: id_resource
        mixins: [<{ data_name }>]
        id_fields: [<{ data_name }>_id, name]
        meta:
            unique_together: [<{ data_name }>, name]
            scope: <{ data_name }>

#
# Define actual data model
#
data:
    <{ data_name }>:
        class: <{ class_name(data_name) }>
        base: <{ data_base }>
#%- if data_id %#
        id: <{ data_id }>
#%- endif %#
#%- if data_id_fields %#
        id_fields: <{ data_id_fields }>
#%- endif %#
#%- if data_key %#
        key: <{ data_key }>
#%- endif %#
        roles:
            edit: <{ data_admin_roles }>
            view: <{ data_view_roles }>
        fields:
#%- if not data_name_field %#
            name: null
#%- endif %#
        meta:
#%- if data_unique_fields %#
            unique_together: <{ data_unique_fields }>
#%- endif %#
#%- if data_default_ordering %#
            ordering: <{ data_default_ordering }>
#%- endif %#
#%- if data_command_base %#
            command_base: <{ data_command_base }>
#%- endif %#

#
# Define data related command mixin with autogenerated field and method accessors
#
command_mixins:
    <{ data_name }>:
        class: <{ class_name(data_name) }>Mixin
#%- if data_command_mixins %#
        mixins: <{ data_command_mixins }>
#%- endif %#
        meta:
            <{ data_name }>:
                data: <{ data_name }>
                priority: <{ data_mixin_priority }>

#
# Define data related base command
#
command_base:
    <{ data_name }>:
        mixins: [<{ data_name }>]
        server_enabled: <{ data_server_enabled }>
        groups_allowed: <{ data_admin_roles }>

#
# Define data resource commands (list, get, save, remove, clear)
#
command:
#%- if not data_command_base %#
#%- set data_command_base = data_name %#
#%- endif %#
#%- for element in split_text(data_command_base, '\s+') %#
<{ element | indent(width = (loop.index * 4), first = true) }>:
#%- if loop.last %#
#%- set indent_space = ((loop.index + 1) * 4) %#
<{ '' | indent(width = indent_space, first = true) }>resource: <{ data_name }>
<{ '' | indent(width = indent_space, first = true) }>base: <{ data_name }>
<{ '' | indent(width = indent_space, first = true) }>base_name: <{ data_name }>
<{ '' | indent(width = indent_space, first = true) }>priority: <{ data_resource_priority }>
#%- endif %#
#%- endfor %#
